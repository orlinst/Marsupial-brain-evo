geom_point() +
scale_y_continuous(limits=c(-3, 5)) +
scale_x_continuous(limits=c(0, 12)) #+ geom_smooth(method = "lm", se = FALSE#)
p1 <- p + geom_abline(intercept = -2.17, slope = 0.574, color="blue", size=1) +
labs(
tag = '',
title="Brain - Body Allometry",
subtitle = expression(paste('Brain size = -2.17 + Body mass'^'0.57')),
caption = expression(paste('R'^'2'*' = 0.9, F'['(1, 174)'] * ' = 1581, p < 0.0001')),
x ="Body Size", y = "Brain Size")
p1
p1
require(ggplot2)
require(RColorBrewer)
X <- "Brain"
Y <- "BodyN"
FR <- "Origin"
dat <-data[,c(which(colnames(data)==Y),which(colnames(data)==X), which(colnames(data)==FR) ),drop=F]
colnames(dat)<-c("Dependent","Independent", "Factor" )
dat$Dependent <- as.numeric (dat$Dependent)
dat$Independent <- as.numeric (dat$Independent)
dat$Factor <- as.factor (dat$Factor)
#create custom scale
myColors <- brewer.pal(4,"Set1") # Pal value must be the same as factor levels
names(myColors) <- levels(dat$Factor)
colScale <- scale_colour_manual(name = "Origin",values = myColors, labels=c("Australia", "NG", "Americas"))
#Plot regression
p <- ggplot(dat, aes(log(Dependent), log(Independent), colour = Factor)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
p1 <- p + colScale + labs(tag = '', title="Origin model", subtitle = 'NG and American Marsupials have larger relative brains', caption ='t=2.9, p=0.003, df=172', x ="Body Size", y = "Brain Size", fill = "Origin")
p1
## manually adjust the slope and intercept from the pgls
p <- ggplot(dat, aes(log(Dependent), log(Independent))) +
geom_point() +
scale_y_continuous(limits=c(-3, 5)) +
scale_x_continuous(limits=c(0, 12)) #+ geom_smooth(method = "lm", se = FALSE#)
p1 <- p + geom_abline(intercept = -2.17, slope = 0.574, color="blue", size=1) +
labs(
tag = '',
title="Brain - Body Allometry",
subtitle = expression(paste('Brain size = -2.17 + Body mass'^'0.57')),
caption = expression(paste('R'^'2'*' = 0.9, F'['(1, 174)'] * ' = 1581, p < 0.0001')),
x ="Body Size", y = "Brain Size")
p1
p1
X <- "Brain"
Y <- "BodyN"
FR <- "Origin"
dat <-data[,c(which(colnames(data)==Y),which(colnames(data)==X), which(colnames(data)==FR) ),drop=F]
colnames(dat)<-c("Dependent","Independent", "Factor" )
dat$Dependent <- as.numeric (dat$Dependent)
dat$Independent <- as.numeric (dat$Independent)
dat$Factor <- as.factor (dat$Factor)
#create custom scale
myColors <- brewer.pal(4,"Set1") # Pal value must be the same as factor levels
names(myColors) <- levels(dat$Factor)
colScale <- scale_colour_manual(name = "Origin",values = myColors, labels=c("Australia", "NG", "Americas"))
#Plot regression
p <- ggplot(dat, aes(log(Dependent), log(Independent), colour = Factor)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
p1 <- p + colScale + labs(tag = '', title="Origin model", subtitle = 'NG and American Marsupials have larger relative brains', caption ='t=2.9, p=0.003, df=172', x ="Body Size", y = "Brain Size", fill = "Origin")
p1
require(geiger)
library(multcomp)
require(phytools)
#format workspace#
par( mfrow = c( 3, 3 ) )
plot.new() # skip a position
dev.off()
#Torpor and play with abs brain size
grp<-as.factor(data$Play)
relBrain<-as.numeric(log(data$Brain))
names(grp)=rownames(data)
names(relBrain)=rownames(data)
x1=aov.phylo(relBrain ~ grp,
tree, nsim = 1000)
plot(relBrain~grp, main = 'Title')
#labelling
grp <- factor(grp, labels = c("No play", "Some play", "Advanced play"))
plot(relBrain~grp, main = 'Difference in brain size in respect to play behaviour', xlab ="Play type", ylab = "Brain Size", sub = '')
summary(glht(x1, linfct = mcp(group = "Tukey")))
relBrain<-as.numeric(log(data$Brain)/log(data$BodyN))
phylANOVA(tree, grp, relBrain, nsim=1000, posthoc=TRUE, p.adj="holm")
#plotting 2
plot(data$FMR.Riek, data$res, col=data$DiurnalityN)
legend('topright', legend = levels(data$DiurnalityN), col = 1:3, cex = 0.8, pch = 1)
p2 <- p %+% droplevels(subset(data,Order == 1:3) + colScale)
library(ape)
library(geiger)
library(phytools)
library(nlme)
library(evomap)
library(caper)
library(adephylo)
library(phangorn)
Names<-rownames(data)
data$BodyN <- as.numeric(data$BodyN)
data$Brain <- as.numeric(data$Brain)
dat<-log(data$Brain)
names(dat)<-data$Names
#Estimate ancestral states
####anc<-ace(dat,tree,method="REML")
anc <- fastAnc(tree, dat, vars=TRUE,CI=TRUE, REML = 1)
anc
plot(tree)
nodelabels()
anc$ace
exp(anc$ace)
plot(tree,label.offset=5)
nodelabels(cex=anc$ace/5,pch=16)
tiplabels(cex=data$Brain/70,pch=16)
Y<-"Brain"; X<-"BodyN"
data<-data[,c(which(colnames(data)==Y),which(colnames(data)==X)),drop=F]
data<-log(data)
tree<-treedata(tree,data,sort=T,warnings=T)$phy
data<-as.data.frame(treedata(tree,data,sort=T,warnings=T)$data)
colnames(data)<-c("Dependent","Independent")
#Run lambda model
pGLS<-gls(Dependent~Independent,data,corPagel(1,phy=tree,fixed=FALSE))
#AncEst
dat<-pGLS$residuals
#anc<-ace(dat,tree,method="REML")$ace
anc <- fastAnc(tree, dat, vars=TRUE,CI=TRUE, REML = 1)
anc
#Plot Scattergram
fancyTree(tree,type="scattergram",X=as.matrix(dat),A=as.matrix(anc),control=list(spin=FALSE),label="horizontal")
# why not try fitted values (slope)*x + intercept from allo eq - see if I can get the fitted values directly from pgls
obj<-contMap(tree,dat,plot=FALSE)
plot(obj,type="fan",legend=0.7*max(nodeHeights(tree)), fsize=c(0.7,0.9))
fancyTree(tree,type="scattergram",X=as.matrix(dat),A=as.matrix(anc),control=list(spin=FALSE),label="horizontal")
obj<-contMap(tree,dat,plot=FALSE)
plot(obj,type="fan",legend=0.7*max(nodeHeights(tree)), fsize=c(0.7,0.9))
trait_all<-c(dat,anc)
#phenogram(tree,trait_all,col="gray",ylab="trait")
phenogram(tree,dat,fsize=0.6,spread.costs=c(1,0))
phenogram(tree,trait_all,spread.labels=TRUE,spread.cost=c(1,0))
setwd("~/")
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
data <-read.csv("marsALL.txt", sep = "\t", header = TRUE)
## LOAD UP TREE
tree <-read.tree("tree176.nwk")
require(caper)
require(dispRity)
require(ape)
require(phytools)
data <-read.csv("marsALL.txt", sep = "\t", header = TRUE)
## LOAD UP TREE
tree <-read.tree("tree176.nwk")
#row names
rownames(data) <- data$Names
dat <- as.data.frame(data$Brain)
dat$Body <- data$BodyN
View(dat)
rownames(dat) <- data$Names
colnames(dat)[which(names(dat) == "data$brain")] <- "Brain"
View(dat)
colnames(dat)[which(names(dat) == "data$Brain")] <- "Brain"
dat$Brain <- log(dat$Brain)
dat$Body <- log(dat$Body)
hist(dat$Body)
hist(dat$Brain)
dat$Brain <- dat$Brain/sqrt(var(dat$Brain))[1]
View(dat)
dat$Body <- dat$Body/sqrt(var(dat$Body))[1]
hist(dat$Brain)
hist(dat$Body)
fitBM<-fitContinuous(tree,dat)
require(geiger)
fitBM<-fitContinuous(tree,dat)
fitOU<-fitContinuous(tree,dat, model="OU")
fitEB<-fitContinuous(tree,dat, model="EB")
phylosig(tree,dat,method="lambda",test=TRUE)
plot(tree)
fitBM
aic.vals<-setNames(c(fitBM$opt$aicc,fitOU$opt$aicc,fitEB$opt$aicc),
c("BM","OU","EB"))
aic.vals<-setNames(c(fitBM$opt$aicc,fitOU$opt$aicc,fitEB$opt$aicc),
c("BM","OU","EB"))
fitOU
fitEB
aic.vals<-setNames(c(fitBM$Brain$opt$aicc,fitOU$Brain$opt$aicc,fitEB$Brain$opt$aicc),
c("BM","OU","EB"))
aic.vals
aic.vals<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc),
c("BM","OU","EB"))
aic.vals
phylosig(tree,dat,method="lambda",test=TRUE)
require(caper)
require(dispRity)
require(ape)
##LOAD UP DATA##
data <-read.csv("marsALL.txt", sep = "\t", header = TRUE)
data$Order <- as.factor(data$Order)
data$Family <- as.factor(data$Family)
data$Origin <- as.factor(data$Origin)
data$Status <- as.factor(data$Status)
data$GeoArea <- as.factor(data$GeoArea)
data$DiurnalityN <- as.factor(data$DiurnalityN)
data$Arboreality <- as.factor(data$Arboreality)
data$Shelter.safety <- as.factor(data$Shelter.safety)
data$Diet <- as.factor(data$Diet)
data$Group.living <- as.factor(data$Group.living)
data$Parental.care <- as.factor(data$Parental.care)
data$Mating.system <- as.factor(data$Mating.system)
data$Torpor <- as.factor(data$Torpor)
data$Play <- as.factor(data$Play)
## LOAD UP TREE
tree <-read.tree("tree176.nwk")
#row names
rownames(data) <- data$Names
#clean up data
clean.data(data, tree)  ## check if data == tree names
require(geiger)
dat <- as.data.frame(data$Brain)
dat$Body <- data$BodyN
rownames(dat) <- data$Names
colnames(dat)[which(names(dat) == "data$Brain")] <- "Brain"
dat$Brain <- log(dat$Brain)
dat$Body <- log(dat$Body)
#still not normal so standartizing
dat$Brain <- dat$Brain/sqrt(var(dat$Brain))[1]
dat$Body <- dat$Body/sqrt(var(dat$Body))[1]
fitBM<-fitContinuous(tree,dat)
fitOU<-fitContinuous(tree,dat, model="OU")
fitEB<-fitContinuous(tree,dat, model="EB")
aic.vals.br<-setNames(c(fitBM$Brain$opt$aicc,fitOU$Brain$opt$aicc,fitEB$Brain$opt$aicc),
c("BM","OU","EB"))
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc),
c("BM","OU","EB"))
aic.vals.br
aic.vals.bo
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc),
c("BM","OU","EB" 'Body'))
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc),
c("BM","OU","EB", "Body"))
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc, 'name'),
c("BM","OU","EB", "Body"))
aic.vals.bo
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc, "name"),
c("BM","OU","EB", "Body"))
aic.vals.bo
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc, name),
c("BM","OU","EB", "Body"))
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc, fitBM$Body),
c("BM","OU","EB", "Body"))
aic.vals.bo
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc, fitBM$Body$label),
c("BM","OU","EB", "Body"))
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc, "fitBM$Body"),
c("BM","OU","EB", "Body"))
aic.vals.bo
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc, ""),
c("BM","OU","EB", "Body"))
aic.vals.bo
aic.vals.bo<-setNames(c("",fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc),
c("BM","OU","EB", "Body"))
aic.vals.bo
aic.vals.br<-setNames(c(fitBM$Brain$opt$aicc,fitOU$Brain$opt$aicc,fitEB$Brain$opt$aicc, 'Brain'),
c("BM","OU","EB", "Brain"))
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc, 'Body'),
c("BM","OU","EB", "Body"))
aic.vals.br
aic.vals.bo
aic.vals.br<-setNames(c(fitBM$Brain$opt$aicc,fitOU$Brain$opt$aicc,fitEB$Brain$opt$aicc, 'Brain'),
c("BM","OU","EB"))
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc, 'Body'),
c("BM","OU","EB"))
aic.vals.br
aic.vals.bo
aic.vals.br<-setNames(c(fitBM$Brain$opt$aicc,fitOU$Brain$opt$aicc,fitEB$Brain$opt$aicc, 'Brain'),
c("BM","OU","EB", "Brain"))
aic.vals.br
aic.vals.br<-setNames(c(fitBM$Brain$opt$aicc,fitOU$Brain$opt$aicc,fitEB$Brain$opt$aicc, 'Brain'),
c("BM","OU","EB", "Brain"))
aic.vals.bo<-setNames(c(fitBM$Body$opt$aicc,fitOU$Body$opt$aicc,fitEB$Body$opt$aicc, 'Body'),
c("BM","OU","EB", "Body"))
aic.vals.br
aic.vals.bo
mars <- comparative.data(phy = tree, data = data, names.col = Names,
vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
#Allometric slope for residuals
#Slope 0.57
model.pgls.res <- pgls(log(Brain) ~ log(BodyN), data = mars, lambda='ML')
#load up comp data with the phylogenetic residuals
res<-model.pgls.res$residuals
require(caper)
require(dispRity)
require(ape)
##LOAD UP DATA##
data <-read.csv("marsALL.txt", sep = "\t", header = TRUE)
data$Order <- as.factor(data$Order)
data$Family <- as.factor(data$Family)
data$Origin <- as.factor(data$Origin)
data$Status <- as.factor(data$Status)
data$GeoArea <- as.factor(data$GeoArea)
data$DiurnalityN <- as.factor(data$DiurnalityN)
data$Arboreality <- as.factor(data$Arboreality)
data$Shelter.safety <- as.factor(data$Shelter.safety)
data$Diet <- as.factor(data$Diet)
data$Group.living <- as.factor(data$Group.living)
data$Parental.care <- as.factor(data$Parental.care)
data$Mating.system <- as.factor(data$Mating.system)
data$Torpor <- as.factor(data$Torpor)
data$Play <- as.factor(data$Play)
## LOAD UP TREE
tree <-read.tree("tree176.nwk")
#row names
rownames(data) <- data$Names
#clean up data
clean.data(data, tree)  ## check if data == tree names
#load up comp data with the phylogenetic residuals
res<-model.pgls.res$residuals (phylo=TRUE)
require(caper)
require(dispRity)
require(ape)
##LOAD UP DATA##
data <-read.csv("marsALL.txt", sep = "\t", header = TRUE)
data$Order <- as.factor(data$Order)
data$Family <- as.factor(data$Family)
data$Origin <- as.factor(data$Origin)
data$Status <- as.factor(data$Status)
data$GeoArea <- as.factor(data$GeoArea)
data$DiurnalityN <- as.factor(data$DiurnalityN)
data$Arboreality <- as.factor(data$Arboreality)
data$Shelter.safety <- as.factor(data$Shelter.safety)
data$Diet <- as.factor(data$Diet)
data$Group.living <- as.factor(data$Group.living)
data$Parental.care <- as.factor(data$Parental.care)
data$Mating.system <- as.factor(data$Mating.system)
data$Torpor <- as.factor(data$Torpor)
data$Play <- as.factor(data$Play)
## LOAD UP TREE
tree <-read.tree("tree176.nwk")
#row names
rownames(data) <- data$Names
#clean up data
clean.data(data, tree)  ## check if data == tree names
#load up comp data with the phylogenetic residuals
res<-residuals(model.pgls.res, phylo = TRUE)
res<- res/sqrt(var(res))[1] #standartize residuals
dat <- as.data.frame(res)
row.names(res) <- data$Names
View(dat)
OUwie(tree,dat,model=c("OUMV"),root.station=TRUE)
install.packages('OIwie')
install.packages('OUwie')
OUwie(tree,dat,model=c("OUMV"),root.station=TRUE)
require(OUwie)
OUwie(tree,dat,model=c("OUMV"),root.station=TRUE)
OUwie(tree,dat[,1],model=c("OUMV"),root.station=TRUE)
OUwie(tree,dat$V1,model=c("OUMV"),root.station=TRUE)
plotSimmap(tree,lwd=3)
load("C:/Users/uqotodor_local/Dropbox/02. Marsupials/Main/3/output/surface_abs_brain.rda")
View(surface)
surfaceTreePlot(tree, bwd[[kk]], labelshifts = T)
require(surface)
surfaceTraitPlot(dat, bwd[[kk]], whattraits = c(1,2))
surfaceTraitPlot(tree, surface$bwd[[kk]], whattraits = c(1,2))
surfaceTreePlot(tree, surface$bwd[[kk]], labelshifts = T, convcol
= TRUE)
kk<-length(surface$bwd)
surfaceTreePlot(tree, surface$bwd[[kk]], labelshifts = T, convcol
= TRUE)
tree.surf <- surfaceTreePlot(tree, surface$bwd[[kk]], labelshifts = T, convcol
= TRUE)
plotSimmap(tree,lwd=3)
plotSimmap(tree.surf,lwd=3)
tree1<-read.simmap("tree.surf",format="phylip")
write.tree(surfaceTreePlot(tree, surface$bwd[[kk]], labelshifts = T, convcol
= TRUE), file = "treepaint", append = FALSE,
digits = 10, tree.names = FALSE)
write.tree(surface$bwd[[kk]], labelshifts = T, convcol
= TRUE), file = "treepaint", append = FALSE,
digits = 10, tree.names = FALSE)
surfaceTreePlot(tree, surface$bwd[[kk]], labelshifts = T, convcol = TRUE)
surfaceTreePlot(tree, surface$bwd[[kk]], labelshifts = T, convcol = TRUE)
tree.surf<- surfaceTreePlot(tree, surface$bwd[[kk]], labelshifts = T, convcol
= TRUE)
as.phylo(tree.surf)<- surfaceTreePlot(tree, surface$bwd[[kk]], labelshifts = T, convcol
= TRUE)
as.phylo(tree.surf)
as.phylo(tree.surf)<- surfaceTreePlot(tree, surface$bwd[[kk]], labelshifts = T, convcol
= TRUE)
tree<-paintSubTree(tree,urface$bwd[[kk]])
tree<-paintSubTree(tree,surface$bwd[[kk]])
tree<-paintSubTree(tree,skk)
tree<-paintSubTree(tree,kk)
if(!require(MCMCglmm)) install.packages("MCMCglmm")
if(!require(ape)) install.packages("ape")
if(!require(caper)) install.packages("caper")
if(!require(MCMCglmm)) install.packages("MCMCglmm")
if(!require(devtools)) install.packages("devtools")
library(devtools)
install_github("TGuillerme/mulTree", ref = "release")
if(!require(MCMCglmm)) install.packages("MCMCglmm")
install.packages('MCMCglmm')
install.packages("MCMCglmm")
require(MCMCglmm)
library(MCMCglmm)
require(MCMCglmm)
rm -Rf /tmp/Rtmp*
)
install.packages(c("dplyr", "evaluate", "fitdistrplus", "FNN", "forcats", "future", "future.apply", "geiger", "geometry", "gmp", "haven", "igraph", "jomo", "ks", "later", "lme4", "maptools", "modelr", "mvtnorm", "openssl", "pbapply", "phylobase", "purrr", "R6", "rcmdcheck", "RcppArmadillo", "readxl", "rjmcmc", "Rmpfr", "RNeXML", "spdep", "stringi", "stringr", "TH.data", "tidyr", "vegan", "xfun", "XML", "zip"))
tempdir()
load("./Data/surface_Data.txt")
load("./Data/surface_data.txt")
load("./Data/data_surface.txt")
setwd("C:/Users/uqotodor_local/Dropbox/05. Github/Marsupial-brain-evo")
load("./Data/data_surface.txt")
data <- read.csv("./Data/marsALL.txt", sep = "\t", header = TRUE)
dat$Brain <- data$BodyN
dat$Brain <- log(dat$Brain)
stdize = stdize = function(x, ...) {(x - min(x, ...)) / (max(x, ...) - min(x, ...))}
dat$Brain <- stdize(dat$Brain)
dat
require(RRphylo)
require(caper)
tree <-read.tree("./Data/tree176.nwk")
abc<- RRphylo(tree, dat)
search.shift(abc,auto.recognize=“no”,covariate=“TRUE”,cov=dat)
search.shift(abc,auto.recognize="no",covariate="TRUE",cov=dat)
search.shift(abc,auto.recognize="no", covariate=TRUE,cov=dat)
search.shift(abc,auto.recognize="yes",test.single= "no",
status.type= "clade",foldername=Data)
search.shift(abc,auto.recognize="yes",test.single= "no",
status.type= "clade",foldername="Data")
dat
View(dat)
colnames(dat(c("Body", "Res")))
colnames(dat) <- c("Body", "Res"))
colnames(dat) <- c("Body", "Res")
View(dat)
save(dat, data_surface.RData)
save(dat, "data_surface.RData")
save("data_surface.RData", dat)
save(dat, "data_surface.RData")
save(dat, file="data_surface.RData")
View(data)
#Loading data, imputed datasets file and tree
data <-read.csv("./Data/marsALL.txt", sep = "\t", header = TRUE)
library(gt)
library(tidyverse)
library(glue)
install.packages("gt")
install.packages("gt")
remotes::install_github("rstudio/gt")
library(gt)
library(tidyverse)
library(glue)
gt(data)
#Loading data, imputed datasets file and tree
data <-read.csv("./Data/surface/surface_summary.txt", sep = "\t", header = TRUE)
gt(data)
#Loading data, imputed datasets file and tree
data <-read.csv("./Data/marsALL.txt", sep = "\t", header = TRUE)
tree <-read.tree("./Data/tree176.nwk")
library("mice")
library("phylomice")
require(caper)
tree <-read.tree("./Data/tree176.nwk")
rownames(data) <- data$Names
data_mice <- data
data_mice$Names <- NULL
data_mice$Species <- NULL
data_mice$Order <- NULL
data_mice$Family <- NULL
data_mice$Common.Name <- NULL
data_mice$Status..Endangered..Vulnerable..Common..Abundant..Rare..or.sparse...Declining..Limited. <- NULL
data_mice$Dimorphism <- NULL
data_mice$ased <- NULL
data_mice$BodyM <- NULL
data_mice$BodyF <- NULL
View(data_mice)
data1$body <- data$BodyN
data1 <- data$BodyN
data1<- as.data.frame(data1)
View(data1)
data1 <- data$Brain
data1 <- data$BodyN
data1<- as.data.frame(data1)
data1 <- cbind(data$Brain)
View(data1)
data1<- as.data.frame(data1)
data1 <- cbind(data$Brain, data1)
colnames(data1) <- c("Brain", "Body")
data1 <- log(data1)
data1$Brain <- stdize(data1$Brain)
stdize = stdize = function(x, ...) {(x - min(x, ...)) / (max(x, ...) - min(x, ...))}
data1$Brain <- stdize(data1$Brain)
View(data1)
data1$Body <- stdize(data1$Body)
data <- read.csv("./Data/marsALL.txt", sep = "\t", header = TRUE)
tree <-read.tree("./Data/tree176.nwk")
data1 <- as.data.frame(data$BodyN)
data1 <- cbind(data$Brain, data1)
View(data1)
colnames(data1) <- c("Brain", "Body")
data1 <- log(data1)
stdize = stdize = function(x, ...) {(x - min(x, ...)) / (max(x, ...) - min(x, ...))}
data1$Brain <- stdize(data1$Brain)
data1$Body <- stdize(data1$Body)
require(RRphylo)
RRphylo(tree, data1)
rownames(data1) <- data$Names
RRphylo(tree, data1)
View(data1)
RR <- RRphylo(tree, data1)
search.conv(RR,tree,data1, PGLSf=TRUE,nsim=1000,rsim=1000, clus=.5)
search.conv(RR,tree,data1, PGLSf=TRUE,nsim=1000,rsim=1000, clus=.5, min.dist = 3)
search.conv(RR,tree,data1, PGLSf=TRUE,nsim=1000,rsim=1000, clus=.5, min.dist = 5, folder ="Data")
search.conv(RR,tree,data1, PGLSf=TRUE,nsim=1000,rsim=1000, clus=.5, min.dist = 5, foldername ="Data")
search.shift(RR, auto.recognize = "yes", test.single = "no", status.type= "clade", foldername ="Data")
